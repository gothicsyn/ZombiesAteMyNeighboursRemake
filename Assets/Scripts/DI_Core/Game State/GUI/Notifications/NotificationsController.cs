// Devils Inc Studios
// Copyright DEVILS INC. STUDIOS LIMITED 2014
//
// TODO: Include a description of the file here.
//
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using UnityEngine;
using UnityEngine.UI;
using System.Collections;
using System.Collections.Generic;

public class NotificationsController : MonoBehaviour
{
	public GameStateController gsc;
	public Text notificationName;
	public Text notificationText;
	public Animator notificationAnimator;
	public bool showingNotification = false;
	public Queue<NotificationData> notificationsQueue;
	public AudioClip notificationSound;
	public float notificationVolume;

	public void OnEnable()
	{
		gsc = GameObject.Find("Game State").GetComponent<GameStateController>();
		DI_Events.EventCenter<string, string, float>.addListener("OnDisplayNotification", handleDisplayNotification);
		notificationsQueue = new Queue<NotificationData>();
	}

	public void OnDisable()
	{
		DI_Events.EventCenter<string, string, float>.removeListener("OnDisplayNotification", handleDisplayNotification);
	}

	public void handleDisplayNotification(string name, string message, float displayTime)
	{
		if (showingNotification == false) {
			notificationName.text = name;
			notificationText.text = message;
			StartCoroutine("showNotification", displayTime);
		}
		else {
			NotificationData data = default(NotificationData);
			data.text = message;
			data.name = name;
			data.time = displayTime;
			notificationsQueue.Enqueue(data);
		}
	}

	public void LateUpdate()
	{
		if (!showingNotification) {
			if (notificationsQueue.Count > 0) {
				NotificationData data = notificationsQueue.Dequeue();
				DI_Events.EventCenter<string, string, float>.invoke("OnDisplayNotification", data.name, data.text, data.time);
			}
		}
	}

	public IEnumerator showNotification(object displayTime)
	{
		showingNotification = true;
		notificationAnimator.Play("Slide In");
		DI_Events.EventCenter<AudioClip, float>.invoke("OnPlayEffect", notificationSound, notificationVolume);
		yield return new WaitForSeconds(2.0f);
		yield return new WaitForSeconds((float)displayTime);
		notificationAnimator.Play("Slide Out");
		yield return new WaitForSeconds(2.0f);
		showingNotification = false;
	}
}
